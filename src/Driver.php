<?phpnamespace LinkSoft\Email;use Hyperf\Contract\StdoutLoggerInterface;use Hyperf\Utils\ApplicationContext;use Swift_Events_EventListener;use Swift_Events_SendEvent;use Swift_Mime_SimpleMessage;use Swift_SmtpTransport;use Swift_Transport;abstract class Driver implements Swift_Transport{    /**     * @var Swift_SmtpTransport     */    protected $client;    /**     * @var array     */    protected $options = [];    /**     * The plug-ins registered with the transport.     *     * @var array     */    public $plugins = [];    /**     * @var StdoutLoggerInterface|mixed     */    protected $logger;    public function __construct(array $options = [])    {        $container = ApplicationContext::getContainer();        $this->options = $options;        $this->client = $this->client();        $this->logger = $container->get(StdoutLoggerInterface::class);    }    abstract function client(): Swift_SmtpTransport;    /**     * {@inheritdoc}     */    public function isStarted()    {        return $this->client->isStarted();    }    /**     * {@inheritdoc}     */    public function start()    {        $this->client->start();    }    /**     * {@inheritdoc}     */    public function stop()    {        $this->client->stop();    }    /**     * {@inheritdoc}     */    public function ping()    {        $this->client->ping();    }    /**     * Register a plug-in with the transport.     */    public function registerPlugin(Swift_Events_EventListener $plugin)    {        array_push($this->plugins, $plugin);    }    /**     * Iterate through registered plugins and execute plugins' methods.     */    protected function beforeSendPerformed(Swift_Mime_SimpleMessage $message)    {        $event = new Swift_Events_SendEvent($this, $message);        foreach ($this->plugins as $plugin) {            if (method_exists($plugin, 'beforeSendPerformed')) {                $plugin->beforeSendPerformed($event);            }        }    }    /**     * Iterate through registered plugins and execute plugins' methods.     */    protected function sendPerformed(Swift_Mime_SimpleMessage $message)    {        $event = new Swift_Events_SendEvent($this, $message);        foreach ($this->plugins as $plugin) {            if (method_exists($plugin, 'sendPerformed')) {                $plugin->sendPerformed($event);            }        }    }    /**     * Get the number of recipients.     *     * @return int     */    protected function numberOfRecipients(Swift_Mime_SimpleMessage $message)    {        return count(array_merge(            (array)$message->getTo(),            (array)$message->getCc(),            (array)$message->getBcc()        ));    }}